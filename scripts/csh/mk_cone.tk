#! /usr/bin/wish -f
# This script has been generated by tkrun,
# it is probably not a good idea to edit this file
# TkRun NEMO
#
#
set startup $env(HOME)/.tkrunrc
if {[file exists $startup]} {source $startup}
frame .menu
pack .menu

button  .menu.run   -text Run  -bg green    -command my_run
button  .menu.save  -text Save -bg blue     -command my_save
button  .menu.load  -text Load -bg blue     -command my_load
button  .menu.quit  -text Quit -bg red      -command my_exit
button  .menu.help  -text Help -bg yellow   -command my_help

pack .menu.run .menu.save .menu.load .menu.quit -side left  -fill x
pack .menu.help -side right -fill x

frame .keys
pack .keys

#> SCALE nbody=10000  1000:1000000:1000      <#
set var_nbody 10000
frame .keys.nbody -borderwidth {2} -relief {raised}
pack .keys.nbody
frame .keys.nbody.frame
global var_nbody
scale .keys.nbody.frame.val -variable var_nbody  -relief {sunken} -from 1000 -to 1000000 -resolution 1000 -length 10c -orient horizontal
pack append .keys.nbody.frame .keys.nbody.frame.val {top frame center expand fill}
label .keys.nbody.key -text nbody:
bind .keys.nbody.key <1> "my_help 0 $var_nbody"
bind .keys.nbody.key <2> "my_help 1 $var_nbody"
bind .keys.nbody.key <3> "set var_nbody 1000; focus .keys.nbody.frame.val"
pack append .keys.nbody .keys.nbody.key {left frame center filly} .keys.nbody.frame {top frame center fillx}
pack append .keys .keys.nbody {top frame center fill}
#> SCALE rmin=0.3     0:1:0.1      <#
set var_rmin 0.3
frame .keys.rmin -borderwidth {2} -relief {raised}
pack .keys.rmin
frame .keys.rmin.frame
global var_rmin
scale .keys.rmin.frame.val -variable var_rmin  -relief {sunken} -from 0 -to 1 -resolution 0.1 -length 10c -orient horizontal
pack append .keys.rmin.frame .keys.rmin.frame.val {top frame center expand fill}
label .keys.rmin.key -text rmin:
bind .keys.rmin.key <1> "my_help 0 $var_rmin"
bind .keys.rmin.key <2> "my_help 1 $var_rmin"
bind .keys.rmin.key <3> "set var_rmin 0; focus .keys.rmin.frame.val"
pack append .keys.rmin .keys.rmin.key {left frame center filly} .keys.rmin.frame {top frame center fillx}
pack append .keys .keys.rmin {top frame center fill}
#> SCALE rmax=1       0:2:0.1      <#
set var_rmax 1
frame .keys.rmax -borderwidth {2} -relief {raised}
pack .keys.rmax
frame .keys.rmax.frame
global var_rmax
scale .keys.rmax.frame.val -variable var_rmax  -relief {sunken} -from 0 -to 2 -resolution 0.1 -length 10c -orient horizontal
pack append .keys.rmax.frame .keys.rmax.frame.val {top frame center expand fill}
label .keys.rmax.key -text rmax:
bind .keys.rmax.key <1> "my_help 0 $var_rmax"
bind .keys.rmax.key <2> "my_help 1 $var_rmax"
bind .keys.rmax.key <3> "set var_rmax 0; focus .keys.rmax.frame.val"
pack append .keys.rmax .keys.rmax.key {left frame center filly} .keys.rmax.frame {top frame center fillx}
pack append .keys .keys.rmax {top frame center fill}
#> SCALE vscale=0.9   -2:2:0.1      <#
set var_vscale 0.9
frame .keys.vscale -borderwidth {2} -relief {raised}
pack .keys.vscale
frame .keys.vscale.frame
global var_vscale
scale .keys.vscale.frame.val -variable var_vscale  -relief {sunken} -from -2 -to 2 -resolution 0.1 -length 10c -orient horizontal
pack append .keys.vscale.frame .keys.vscale.frame.val {top frame center expand fill}
label .keys.vscale.key -text vscale:
bind .keys.vscale.key <1> "my_help 0 $var_vscale"
bind .keys.vscale.key <2> "my_help 1 $var_vscale"
bind .keys.vscale.key <3> "set var_vscale -2; focus .keys.vscale.frame.val"
pack append .keys.vscale .keys.vscale.key {left frame center filly} .keys.vscale.frame {top frame center fillx}
pack append .keys .keys.vscale {top frame center fill}
#> SCALE outflow=0.4  0:2:0.1      <#
set var_outflow 0.4
frame .keys.outflow -borderwidth {2} -relief {raised}
pack .keys.outflow
frame .keys.outflow.frame
global var_outflow
scale .keys.outflow.frame.val -variable var_outflow  -relief {sunken} -from 0 -to 2 -resolution 0.1 -length 10c -orient horizontal
pack append .keys.outflow.frame .keys.outflow.frame.val {top frame center expand fill}
label .keys.outflow.key -text outflow:
bind .keys.outflow.key <1> "my_help 0 $var_outflow"
bind .keys.outflow.key <2> "my_help 1 $var_outflow"
bind .keys.outflow.key <3> "set var_outflow 0; focus .keys.outflow.frame.val"
pack append .keys.outflow .keys.outflow.key {left frame center filly} .keys.outflow.frame {top frame center fillx}
pack append .keys .keys.outflow {top frame center fill}
#> RADIO flow=flat    flat,rise,fall      <#
frame .keys.flow -borderwidth {2} -relief {raised}
pack .keys.flow
frame .keys.flow.frame
global var_flow
set var_flow flat
radiobutton .keys.flow.frame.flat -variable var_flow -text flat -value flat -anchor w 
radiobutton .keys.flow.frame.rise -variable var_flow -text rise -value rise -anchor w 
radiobutton .keys.flow.frame.fall -variable var_flow -text fall -value fall -anchor w 
pack append .keys.flow.frame  .keys.flow.frame.flat {left frame center filly} .keys.flow.frame.rise {left frame center filly} .keys.flow.frame.fall {top frame center fillx}
label .keys.flow.key -text flow:
bind .keys.flow.key <1> "my_help 0 $var_flow"
bind .keys.flow.key <2> "my_help 1 $var_flow"
# is bug in next line fixed now?
bind .keys.flow.key <3> "set var_flow \"flat\""
pack append .keys.flow .keys.flow.key {left frame center filly} .keys.flow.frame {top frame center fillx}
pack append .keys .keys.flow {top frame center fill}
#> SCALE cone=30      0:90:1      <#
set var_cone 30
frame .keys.cone -borderwidth {2} -relief {raised}
pack .keys.cone
frame .keys.cone.frame
global var_cone
scale .keys.cone.frame.val -variable var_cone  -relief {sunken} -from 0 -to 90 -resolution 1 -length 10c -orient horizontal
pack append .keys.cone.frame .keys.cone.frame.val {top frame center expand fill}
label .keys.cone.key -text cone:
bind .keys.cone.key <1> "my_help 0 $var_cone"
bind .keys.cone.key <2> "my_help 1 $var_cone"
bind .keys.cone.key <3> "set var_cone 0; focus .keys.cone.frame.val"
pack append .keys.cone .keys.cone.key {left frame center filly} .keys.cone.frame {top frame center fillx}
pack append .keys .keys.cone {top frame center fill}
#> SCALE inc=0        0:90:1      <#
set var_inc 0
frame .keys.inc -borderwidth {2} -relief {raised}
pack .keys.inc
frame .keys.inc.frame
global var_inc
scale .keys.inc.frame.val -variable var_inc  -relief {sunken} -from 0 -to 90 -resolution 1 -length 10c -orient horizontal
pack append .keys.inc.frame .keys.inc.frame.val {top frame center expand fill}
label .keys.inc.key -text inc:
bind .keys.inc.key <1> "my_help 0 $var_inc"
bind .keys.inc.key <2> "my_help 1 $var_inc"
bind .keys.inc.key <3> "set var_inc 0; focus .keys.inc.frame.val"
pack append .keys.inc .keys.inc.key {left frame center filly} .keys.inc.frame {top frame center fillx}
pack append .keys .keys.inc {top frame center fill}
#> SCALE pa=0         0:360:1      <#
set var_pa 0
frame .keys.pa -borderwidth {2} -relief {raised}
pack .keys.pa
frame .keys.pa.frame
global var_pa
scale .keys.pa.frame.val -variable var_pa  -relief {sunken} -from 0 -to 360 -resolution 1 -length 10c -orient horizontal
pack append .keys.pa.frame .keys.pa.frame.val {top frame center expand fill}
label .keys.pa.key -text pa:
bind .keys.pa.key <1> "my_help 0 $var_pa"
bind .keys.pa.key <2> "my_help 1 $var_pa"
bind .keys.pa.key <3> "set var_pa 0; focus .keys.pa.frame.val"
pack append .keys.pa .keys.pa.key {left frame center filly} .keys.pa.frame {top frame center fillx}
pack append .keys .keys.pa {top frame center fill}
#> RADIO view=0       -1,0,1      <#
frame .keys.view -borderwidth {2} -relief {raised}
pack .keys.view
frame .keys.view.frame
global var_view
set var_view 0
radiobutton .keys.view.frame.-1 -variable var_view -text -1 -value -1 -anchor w 
radiobutton .keys.view.frame.0 -variable var_view -text 0 -value 0 -anchor w 
radiobutton .keys.view.frame.1 -variable var_view -text 1 -value 1 -anchor w 
pack append .keys.view.frame  .keys.view.frame.-1 {left frame center filly} .keys.view.frame.0 {left frame center filly} .keys.view.frame.1 {top frame center fillx}
label .keys.view.key -text view:
bind .keys.view.key <1> "my_help 0 $var_view"
bind .keys.view.key <2> "my_help 1 $var_view"
# is bug in next line fixed now?
bind .keys.view.key <3> "set var_view \"-1\""
pack append .keys.view .keys.view.key {left frame center filly} .keys.view.frame {top frame center fillx}
pack append .keys .keys.view {top frame center fill}
#> RADIO jzd=1        -1,1      <#
frame .keys.jzd -borderwidth {2} -relief {raised}
pack .keys.jzd
frame .keys.jzd.frame
global var_jzd
set var_jzd 1
radiobutton .keys.jzd.frame.-1 -variable var_jzd -text -1 -value -1 -anchor w 
radiobutton .keys.jzd.frame.1 -variable var_jzd -text 1 -value 1 -anchor w 
pack append .keys.jzd.frame  .keys.jzd.frame.-1 {left frame center filly} .keys.jzd.frame.1 {top frame center fillx}
label .keys.jzd.key -text jzd:
bind .keys.jzd.key <1> "my_help 0 $var_jzd"
bind .keys.jzd.key <2> "my_help 1 $var_jzd"
# is bug in next line fixed now?
bind .keys.jzd.key <3> "set var_jzd \"-1\""
pack append .keys.jzd .keys.jzd.key {left frame center filly} .keys.jzd.frame {top frame center fillx}
pack append .keys .keys.jzd {top frame center fill}
#> SCALE incd=80      0:90:1      <#
set var_incd 80
frame .keys.incd -borderwidth {2} -relief {raised}
pack .keys.incd
frame .keys.incd.frame
global var_incd
scale .keys.incd.frame.val -variable var_incd  -relief {sunken} -from 0 -to 90 -resolution 1 -length 10c -orient horizontal
pack append .keys.incd.frame .keys.incd.frame.val {top frame center expand fill}
label .keys.incd.key -text incd:
bind .keys.incd.key <1> "my_help 0 $var_incd"
bind .keys.incd.key <2> "my_help 1 $var_incd"
bind .keys.incd.key <3> "set var_incd 0; focus .keys.incd.frame.val"
pack append .keys.incd .keys.incd.key {left frame center filly} .keys.incd.frame {top frame center fillx}
pack append .keys .keys.incd {top frame center fill}
#> RADIO mirror=1     0,1      <#
frame .keys.mirror -borderwidth {2} -relief {raised}
pack .keys.mirror
frame .keys.mirror.frame
global var_mirror
set var_mirror 1
radiobutton .keys.mirror.frame.0 -variable var_mirror -text 0 -value 0 -anchor w 
radiobutton .keys.mirror.frame.1 -variable var_mirror -text 1 -value 1 -anchor w 
pack append .keys.mirror.frame  .keys.mirror.frame.0 {left frame center filly} .keys.mirror.frame.1 {top frame center fillx}
label .keys.mirror.key -text mirror:
bind .keys.mirror.key <1> "my_help 0 $var_mirror"
bind .keys.mirror.key <2> "my_help 1 $var_mirror"
# is bug in next line fixed now?
bind .keys.mirror.key <3> "set var_mirror \"0\""
pack append .keys.mirror .keys.mirror.key {left frame center filly} .keys.mirror.frame {top frame center fillx}
pack append .keys .keys.mirror {top frame center fill}
#> RADIO fill=f       t,f      <#
frame .keys.fill -borderwidth {2} -relief {raised}
pack .keys.fill
frame .keys.fill.frame
global var_fill
set var_fill f
radiobutton .keys.fill.frame.t -variable var_fill -text t -value t -anchor w 
radiobutton .keys.fill.frame.f -variable var_fill -text f -value f -anchor w 
pack append .keys.fill.frame  .keys.fill.frame.t {left frame center filly} .keys.fill.frame.f {top frame center fillx}
label .keys.fill.key -text fill:
bind .keys.fill.key <1> "my_help 0 $var_fill"
bind .keys.fill.key <2> "my_help 1 $var_fill"
# is bug in next line fixed now?
bind .keys.fill.key <3> "set var_fill \"t\""
pack append .keys.fill .keys.fill.key {left frame center filly} .keys.fill.frame {top frame center fillx}
pack append .keys .keys.fill {top frame center fill}
#> RADIO disk=1       0,1/1000,1/100,1/10,1,10,100,1000,10000,inf      <#
frame .keys.disk -borderwidth {2} -relief {raised}
pack .keys.disk
frame .keys.disk.frame
global var_disk
set var_disk 1
radiobutton .keys.disk.frame.0 -variable var_disk -text 0 -value 0 -anchor w 
radiobutton .keys.disk.frame.1/1000 -variable var_disk -text 1/1000 -value 1/1000 -anchor w 
radiobutton .keys.disk.frame.1/100 -variable var_disk -text 1/100 -value 1/100 -anchor w 
radiobutton .keys.disk.frame.1/10 -variable var_disk -text 1/10 -value 1/10 -anchor w 
radiobutton .keys.disk.frame.1 -variable var_disk -text 1 -value 1 -anchor w 
radiobutton .keys.disk.frame.10 -variable var_disk -text 10 -value 10 -anchor w 
radiobutton .keys.disk.frame.100 -variable var_disk -text 100 -value 100 -anchor w 
radiobutton .keys.disk.frame.1000 -variable var_disk -text 1000 -value 1000 -anchor w 
radiobutton .keys.disk.frame.10000 -variable var_disk -text 10000 -value 10000 -anchor w 
radiobutton .keys.disk.frame.inf -variable var_disk -text inf -value inf -anchor w 
pack append .keys.disk.frame  .keys.disk.frame.0 {left frame center filly} .keys.disk.frame.1/1000 {left frame center filly} .keys.disk.frame.1/100 {left frame center filly} .keys.disk.frame.1/10 {left frame center filly} .keys.disk.frame.1 {left frame center filly} .keys.disk.frame.10 {left frame center filly} .keys.disk.frame.100 {left frame center filly} .keys.disk.frame.1000 {left frame center filly} .keys.disk.frame.10000 {left frame center filly} .keys.disk.frame.inf {top frame center fillx}
label .keys.disk.key -text disk:
bind .keys.disk.key <1> "my_help 0 $var_disk"
bind .keys.disk.key <2> "my_help 1 $var_disk"
# is bug in next line fixed now?
bind .keys.disk.key <3> "set var_disk \"0\""
pack append .keys.disk .keys.disk.key {left frame center filly} .keys.disk.frame {top frame center fillx}
pack append .keys .keys.disk {top frame center fill}
#> SCALE svar=0.01    0:1:0.01      <#
set var_svar 0.01
frame .keys.svar -borderwidth {2} -relief {raised}
pack .keys.svar
frame .keys.svar.frame
global var_svar
scale .keys.svar.frame.val -variable var_svar  -relief {sunken} -from 0 -to 1 -resolution 0.01 -length 10c -orient horizontal
pack append .keys.svar.frame .keys.svar.frame.val {top frame center expand fill}
label .keys.svar.key -text svar:
bind .keys.svar.key <1> "my_help 0 $var_svar"
bind .keys.svar.key <2> "my_help 1 $var_svar"
bind .keys.svar.key <3> "set var_svar 0; focus .keys.svar.frame.val"
pack append .keys.svar .keys.svar.key {left frame center filly} .keys.svar.frame {top frame center fillx}
pack append .keys .keys.svar {top frame center fill}
#> SCALE noise=0.0    0:1:0.001      <#
set var_noise 0.0
frame .keys.noise -borderwidth {2} -relief {raised}
pack .keys.noise
frame .keys.noise.frame
global var_noise
scale .keys.noise.frame.val -variable var_noise  -relief {sunken} -from 0 -to 1 -resolution 0.001 -length 10c -orient horizontal
pack append .keys.noise.frame .keys.noise.frame.val {top frame center expand fill}
label .keys.noise.key -text noise:
bind .keys.noise.key <1> "my_help 0 $var_noise"
bind .keys.noise.key <2> "my_help 1 $var_noise"
bind .keys.noise.key <3> "set var_noise 0; focus .keys.noise.frame.val"
pack append .keys.noise .keys.noise.key {left frame center filly} .keys.noise.frame {top frame center fillx}
pack append .keys .keys.noise {top frame center fill}
#> ENTRY out=cone1      <#
frame .keys.out -borderwidth {2} -relief {raised}
pack .keys.out
frame .keys.out.frame
global var_out
set var_out cone1
entry .keys.out.frame.val -textvariable var_out  -relief {sunken}
pack append .keys.out.frame .keys.out.frame.val {top frame center expand fill}
label .keys.out.key -text out:
bind .keys.out.key <1> "my_help 0 $var_out"
bind .keys.out.key <2> "my_help 1 $var_out"
bind .keys.out.key <3> "set var_out \"\"; focus .keys.out.frame.val"
pack append .keys.out .keys.out.key {left frame center filly} .keys.out.frame {top frame center fillx}
pack append .keys .keys.out {top frame center fill}
#> CHECK mode=ds9     ds9,plot      <#
frame .keys.mode -borderwidth {2} -relief {raised}
pack .keys.mode
frame .keys.mode.frame
global var_mode
set var_mode ds9
foreach i [split ds9 ","] {
   set var_mode_$i 1
}
checkbutton .keys.mode.frame.ds9 -variable var_mode_ds9 -text ds9 -anchor w -command new_var_mode 
set arr_var_mode(var_mode_ds9) ds9
global var_mode_ds9
checkbutton .keys.mode.frame.plot -variable var_mode_plot -text plot -anchor w -command new_var_mode 
set arr_var_mode(var_mode_plot) plot
global var_mode_plot
global arr_var_mode
pack append .keys.mode.frame  .keys.mode.frame.ds9 {left frame center filly} .keys.mode.frame.plot {top frame center fillx}
label .keys.mode.key -text mode:
bind .keys.mode.key <1> "my_help 0 $var_mode"
bind .keys.mode.key <2> "my_help 1 $var_mode"
bind .keys.mode.key <3> "set var_mode_ds9 0;set var_mode_plot 0;new_var_mode"
pack append .keys.mode .keys.mode.key {left frame center filly} .keys.mode.frame {top frame center fillx}
pack append .keys .keys.mode {top frame center fill}
#> SCALE debug=-1     -1:9      <#
set var_debug -1
frame .keys.debug -borderwidth {2} -relief {raised}
pack .keys.debug
frame .keys.debug.frame
global var_debug
scale .keys.debug.frame.val -variable var_debug  -relief {sunken} -from -1 -to 9 -length 10c -orient horizontal
pack append .keys.debug.frame .keys.debug.frame.val {top frame center expand fill}
label .keys.debug.key -text debug:
bind .keys.debug.key <1> "my_help 0 $var_debug"
bind .keys.debug.key <2> "my_help 1 $var_debug"
bind .keys.debug.key <3> "set var_debug -1; focus .keys.debug.frame.val"
pack append .keys.debug .keys.debug.key {left frame center filly} .keys.debug.frame {top frame center fillx}
pack append .keys .keys.debug {top frame center fill}
set keyList { .keys.out.frame.val }
proc my_save {} {
  puts "my_save:"
  set filename "./mk_cone.key"
  set file [open $filename w]
  global var_nbody
  puts $file "nbody=$var_nbody"
  global var_rmin
  puts $file "rmin=$var_rmin"
  global var_rmax
  puts $file "rmax=$var_rmax"
  global var_vscale
  puts $file "vscale=$var_vscale"
  global var_outflow
  puts $file "outflow=$var_outflow"
  global var_flow
  puts $file "flow=$var_flow"
  global var_cone
  puts $file "cone=$var_cone"
  global var_inc
  puts $file "inc=$var_inc"
  global var_pa
  puts $file "pa=$var_pa"
  global var_view
  puts $file "view=$var_view"
  global var_jzd
  puts $file "jzd=$var_jzd"
  global var_incd
  puts $file "incd=$var_incd"
  global var_mirror
  puts $file "mirror=$var_mirror"
  global var_fill
  puts $file "fill=$var_fill"
  global var_disk
  puts $file "disk=$var_disk"
  global var_svar
  puts $file "svar=$var_svar"
  global var_noise
  puts $file "noise=$var_noise"
  global var_out
  puts $file "out=$var_out"
  global var_mode
  puts $file "mode=$var_mode"
  global var_debug
  puts $file "debug=$var_debug"
  close $file
}
proc my_load {} {
  puts "my_load:"
  global var_nbody
  global var_rmin
  global var_rmax
  global var_vscale
  global var_outflow
  global var_flow
  global var_cone
  global var_inc
  global var_pa
  global var_view
  global var_jzd
  global var_incd
  global var_mirror
  global var_fill
  global var_disk
  global var_svar
  global var_noise
  global var_out
  global var_mode
  global var_debug
  set filename "./mk_cone.key"
  set file [open $filename r]
  while {[gets $file line] >= 0} {
    set key [lindex [split $line =] 0]
    set val [lindex [split $line =] 1]
    if {$key == "nbody"} { set var_nbody $val }
    if {$key == "rmin"} { set var_rmin $val }
    if {$key == "rmax"} { set var_rmax $val }
    if {$key == "vscale"} { set var_vscale $val }
    if {$key == "outflow"} { set var_outflow $val }
    if {$key == "flow"} { set var_flow $val }
    if {$key == "cone"} { set var_cone $val }
    if {$key == "inc"} { set var_inc $val }
    if {$key == "pa"} { set var_pa $val }
    if {$key == "view"} { set var_view $val }
    if {$key == "jzd"} { set var_jzd $val }
    if {$key == "incd"} { set var_incd $val }
    if {$key == "mirror"} { set var_mirror $val }
    if {$key == "fill"} { set var_fill $val }
    if {$key == "disk"} { set var_disk $val }
    if {$key == "svar"} { set var_svar $val }
    if {$key == "noise"} { set var_noise $val }
    if {$key == "out"} { set var_out $val }
    if {$key == "mode"} { set var_mode $val; load_var_mode }
    if {$key == "debug"} { set var_debug $val }
  }
  close $file
}
proc my_run {} {
  puts "my_run:"
  global var_nbody
  lappend args "nbody=$var_nbody"
  global var_rmin
  lappend args "rmin=$var_rmin"
  global var_rmax
  lappend args "rmax=$var_rmax"
  global var_vscale
  lappend args "vscale=$var_vscale"
  global var_outflow
  lappend args "outflow=$var_outflow"
  global var_flow
  lappend args "flow=$var_flow"
  global var_cone
  lappend args "cone=$var_cone"
  global var_inc
  lappend args "inc=$var_inc"
  global var_pa
  lappend args "pa=$var_pa"
  global var_view
  lappend args "view=$var_view"
  global var_jzd
  lappend args "jzd=$var_jzd"
  global var_incd
  lappend args "incd=$var_incd"
  global var_mirror
  lappend args "mirror=$var_mirror"
  global var_fill
  lappend args "fill=$var_fill"
  global var_disk
  lappend args "disk=$var_disk"
  global var_svar
  lappend args "svar=$var_svar"
  global var_noise
  lappend args "noise=$var_noise"
  global var_out
  lappend args "out=$var_out"
  global var_mode
  lappend args "mode=$var_mode"
  global var_debug
  lappend args "debug=$var_debug"
   eval exec <@stdin >@stdout ./mk_cone $args
}
# This file is temporary; for merging into main tkrun script
# For: set mode    = ds9       #> CHECK mode=ds9     ds9,plot
proc new_var_mode {} {
   global arr_var_mode var_mode
   set var_mode ""
   global var_mode_ds9
   if {$var_mode_ds9} { lappend var_mode $arr_var_mode(var_mode_ds9)}
   global var_mode_plot
   if {$var_mode_plot} { lappend var_mode $arr_var_mode(var_mode_plot)}
   set var_mode [join $var_mode ","]
}
# For: set mode    = ds9       #> CHECK mode=ds9     ds9,plot
proc load_var_mode {} {
   global arr_var_mode var_mode
   global var_mode_ds9
   global var_mode_plot
   foreach i [split "ds9,plot" ","] {
     set var_mode_$i 0
   }
   foreach i [split $var_mode ","] {
     set var_mode_$i 1
   }
}
focus [lindex $keyList 0]

foreach w $keyList {
    if {1} {
       bind $w <Return> {tab $keyList}
       $w insert end {}
    }
}

proc tab list {
    set i [lsearch -exact $list [focus]]
    incr i
    if {$i >= [llength $list]} {
        set i 0
    }
    focus [lindex $list $i]
}

proc my_help {lev} {
  puts "my_help:"
}
proc my_exit {} {
  my_save
  puts "my_exit:"
  exit
}
# end of script 

# Found 20 widgets
# 2: nbody=10000
# 2: rmin=0.3
# 2: rmax=1
# 2: vscale=0.9
# 2: outflow=0.4
# 3: flow=flat
# 2: cone=30
# 2: inc=0
# 2: pa=0
# 3: view=0
# 3: jzd=1
# 2: incd=80
# 3: mirror=1
# 3: fill=f
# 3: disk=1
# 2: svar=0.01
# 2: noise=0.0
# 1: out=cone1
# 4: mode=ds9
# 2: debug=-1
